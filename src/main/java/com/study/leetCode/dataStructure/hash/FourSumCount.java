package main.java.com.study.leetCode.dataStructure.hash;

import java.util.HashMap;
import java.util.Map;

/**
 * @author: whb
 * @date: 2020/6/11 17:28
 * @description: LeetCode-454-四数相加Ⅱ
 * 给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。
 * <p>
 * 为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -228 到 228 - 1 之间，最终结果不会超过 231 - 1 。
 * <p>
 * 例如:
 * 输入:
 * A = [ 1, 2]
 * B = [-2,-1]
 * C = [-1, 2]
 * D = [ 0, 2]
 * <p>
 * 输出:
 * 2
 * <p>
 * 解释:
 * 两个元组如下:
 * 1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
 * 2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0
 */
public class FourSumCount {
    /**
     * 先遍历数组A、B，将他们的和放入hashmap中，hashmap存储这个数和他出现的次数
     * 再遍历C、D，将他们的和记为target，如果-target存在于hashmap,那么就将最后结果加上hashMap对应的key
     *
     * @param A
     * @param B
     * @param C
     * @param D
     * @return
     */
    public static int fourSumCountMap(int[] A, int[] B, int[] C, int[] D) {
        int result = 0;
        //存sum和它对应次数
        Map<Integer, Integer> map = new HashMap<>();
        for (int a : A) {
            for (int b : B) {
                //若有a+b这个key则用它的值+1，若没有就用默认的0
                map.put(a + b, map.getOrDefault(a + b, 0) + 1);
            }
        }
        for (int c : C) {
            for (int d : D) {
                if (map.containsKey(-c - d)) {
                    //若有-c-d这个key就用它的值，代表-c-b=a+b
                    result += map.getOrDefault(-c - d, 0);
                }
            }
        }
        return result;
    }

    /**
     * 暴力解法，当数组元素过多会超出时间限制
     *
     * @param A
     * @param B
     * @param C
     * @param D
     * @return
     */
    public static int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        int result = 0;
        for (int i = 0; i < A.length; i++) {
            for (int j = 0; j < B.length; j++) {
                for (int m = 0; m < C.length; m++) {
                    for (int n = 0; n < D.length; n++) {
                        result += (A[i] + B[j] + C[m] + D[n] == 0) ? 1 : 0;
                    }
                }
            }
        }
        return result;
    }

    public static void main(String[] args) {
        int[] A = new int[]{1, 2};
        int[] B = new int[]{-2, -1};
        int[] C = new int[]{-1, 2};
        int[] D = new int[]{0, 2};
        System.out.println(fourSumCount(A, B, C, D));
        A = new int[]{0, -19, -7, -3, -18, -29, -29, -23, 4, -31, -3, -25, -10, -15, 8, -8, -32, 6, 10, -14, 4, -29, -15, -20, -29, -26, -11, -20, -25, -30, 3, -6, -12, 9, -10, 9, 10, 4, -28, -18, -4, -16, 0, -15, -31, 9, -28, 2, 3, -14, -11, -7, -9, -4, -27, -4, -26, -23, -31, -2, -11, -7, 7, -3, -19, -5, -11, -6, 10, -26, -30, -5, -4, -6, -22, -21, -29, -14, 0, -28, 5, -16, 5, -21, -30, 2, -22, -10, -10, -9, -11, -20, -17, 1, -4, -17, -18, -15, -30, -29};
        B = new int[]{-11, -28, -18, 1, -1, -2, -10, -8, -19, -4, -13, -20, -2, -16, 9, -3, -20, 5, -21, 8, -29, -28, -5, -25, -27, -3, -11, -13, -13, 6, -30, -24, 7, -6, -5, -7, -23, -13, -1, -17, -2, 9, -25, -24, 5, -18, -15, -6, -16, -20, -26, -32, -27, -15, -29, -3, -20, -1, -32, -21, -1, 10, -26, 8, -18, 7, -3, 7, 0, -27, -25, -5, -16, -5, -23, -26, -16, -29, 10, -26, -28, -5, -22, -29, -12, -2, -27, -32, -4, -30, -13, -2, 8, -24, -16, -9, 9, -27, -12, 9};
        C = new int[]{-26, 5, 4, -8, -18, -23, -4, 10, 7, -22, -21, -26, -26, -13, -15, -31, -24, -13, -8, -31, -18, -23, -8, -1, -1, 3, -3, -29, -8, -30, -17, -12, -23, -19, -21, -7, -24, 8, -2, -29, -26, -20, 6, 9, -18, -22, -27, -29, -31, 1, -32, -14, -31, -31, -24, -8, -30, -20, 7, -29, -30, -19, -15, 1, 1, -30, -25, -12, -16, -14, 9, -13, 6, -10, -15, -1, -21, -4, -14, 1, -21, -7, -15, -24, -16, 9, -25, -18, -26, -26, -27, -5, 4, -23, 8, 2, -14, -30, 0, -12};
        D = new int[]{-5, -15, -26, -25, 5, 3, 1, 2, -1, -1, -29, -11, 6, -23, -12, -27, 1, -18, -10, 1, 9, -2, -21, -12, -7, 2, -8, -26, 3, -6, 0, 7, -22, -9, 5, 10, -29, -14, -25, -9, -1, -32, 1, -14, -27, -29, -30, 8, -15, 2, 3, -11, -19, 4, -26, -10, 3, 2, 8, -25, 7, 1, -19, 2, -9, -8, -30, 1, -29, 2, 0, -7, 6, 1, 6, 8, 1, 7, -8, -28, 3, 4, -30, -2, -10, -1, -11, -3, 0, -19, 0, 4, -3, -29, -15, -13, -7, 10, 10, 9};
        System.out.println(fourSumCountMap(A, B, C, D));
        A = new int[]{0};
        B = new int[]{0};
        C = new int[]{0};
        D = new int[]{0};
        System.out.println(fourSumCountMap(A, B, C, D));
    }
}
