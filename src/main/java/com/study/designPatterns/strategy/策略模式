首先，**策略模式是属于行为型模式的一种**，为了更好的理解策略模式，首先要理清楚什么是行为型模式。

**行为型模式(Behavioral Pattern)是对在不同的对象之间划分责任和算法的抽象化。**

在对象的创建（创建型模式）和对象的结构（结构性模式）问题都解决了之后，就剩下对象的行为问题了，如果对象的行为设计的较好，那么对象的行为就会更清晰，它们之间的协作效率就会提高，也更方便开发人员进行维护和拓展。

**通过行为型模式，可以更加清晰地划分类与对象的职责，并研究系统在运行时实例对象 之间的交互。**在系统运行时，对象并不是孤立的，它们可以通过相互通信与协作完成某些复杂功能，一个对象在运行时也将影响到其他对象的运行。

行为型模式仔细区分的话分为类行为型模式和对象行为型模式两种：

**类行为型模式**：类的行为型模式使用继承关系在几个类之间分配行为，类行为型模式主要通过多态等方式来分配父类与子类的职责。

**对象行为型模式**：对象的行为型模式则使用对象的聚合关联关系来分配行为，对象行为型模式主要是通过对象关联等方式来分配两个或多个类的职责。根据“合成复用原则”，系统中要尽量使用关联关系来取代继承关系，因此大部分行为型设计模式都属于对象行为型设计模式。

完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。
关于策略模式比较好的解释是：定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化。

策略模式是对算法的一种封装，它把算法的责任和算法本身分割开，委派给不同的实例对象管理。策略模式通常把一个系列的算法封装到一系列的策略类里面，作为一个抽象策略类的子类。

策略模式主要优点在不修改原有系统的基础上可以更换算法或者增加新的算法（侧重算法）；它也可以避免多重条件语句，针对这种多重判断语句提供了一个新的解决思路；
其缺点在于客户端必须知道所有的策略类，并理解其区别进行后续的判别；由于在一定程度上增加了系统中类的个数，可能会存在很多策略类。

那么，在什么场景可以使用策略模式？

比如，在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为；或者在几种算法中（选择其中的一种；如果一个对象有很多的行为，如果我不想用 if else if 这种多重的条件选择语句来判断，那么策略模式是一种比较好的替代方式；不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法和相关的数据结构，提高算法的保密性与安全性。

**示例说明：**

demoOne是百货商城活动促销；
demoTwo是购票策略；














