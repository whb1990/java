**什么是抽象工厂模式？**

抽象工厂模式是所有形态的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式是指当有多个抽象角色时，使用的一种工厂模式。抽象工厂模式可以向客户端提供一个接口，使客户端在不必指定产品的具体情况下，创建多个产品族中的对象（工厂模式的本质）。但是这种模式下，它有多个抽象产品类，每个抽象产品类可以派生出多个具体产品类；一个抽象工厂类，可以派生多个具体工厂类，每个具体的工厂类可以创建多个产品类的实例。每一个模式都是针对一定问题的解决方案。工厂方法模式针对的是一个产品等级结构；而抽象工厂模式针对的是多个产品等级结果。

**抽象工厂模式的优缺点：**

优点：这种模式是针对“新系列”的需求变化。分离了具体的类，抽象工厂模式帮助开发者控制一个应用创建的对象的类，因为一个（实例）工厂封装创建产品对象的责任和过程。它将使用者和类的实现进行分离，使用者通过他们的抽象接口进行自定义逻辑的实例操作；其次，这种模式创建了一个完整的对象系列（上面的英雄和技能），这样利于对象的一致性（牵一发动全身）。所以，当一系列的对象被设计成一起工作或者一个应用一次只能使用同一个系列中的对象，使用抽象工厂模式就非常满足这种应用场景。

缺点：代码量相对简单工厂模式、工厂方法模式较大；难以支持新种类的产品（也就是抽象角色），因为抽象工厂已经确定了创建的产品集合（抽象方法），如果添加新的抽象方法或者接口，所有实现了该抽象工厂的子类就都会有影响

**简单工厂模式、工厂方法模式以及抽象工厂模式的总结：**

工厂模式：

专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有相同的父类。本质是通过工厂类的传入的参数（不同对象的标识）动态决定应该创建那一个产品类。这种模式下工厂类是整个模式的核心它包含必要的逻辑判断，创建实例的判断等。外部无需了解这些对象如何创建以及如何组织的，这有利于结构优化。

这种模式适用于工厂类负责创建的对象比较少，只需要知道传入工厂类的参数，对于如何创建并不关心。

工厂方法模式：

这种模式是对工厂模式的一种优化升级，解决了工厂模式下的开闭问题。本质是在工厂和产品之间增加接口，工厂不再负责产品的创建，由接口针对不同的条件返回具体的对象实例。有一个抽象的工厂类，具体的逻辑有子类去完成，这种模式下工厂类和产品类往往可以依次对应（即一个抽象工厂对应一个抽象产品）。这种模式拓展性强，解决了开闭问题，关系对应性强。

适用于当一个类不知道它所必须创建对象的类或者一个类希望由子类来指定它所创建的对象时；当类将创建的需的职责委托给帮助类中的某一个，并且希望得到指定帮助类的信息，可以使用工厂方法模式

抽象工厂模式：

抽象工厂模式的概念上面也说到了，这是当有多个抽象角色时使用的一种工厂模式。这种模式下，它有多个抽象产品类，每个抽象产品类可以派生出多个具体产品类；一个抽象工厂类，可以派生多个具体工厂类，每个具体的工厂类可以创建多个产品类的实例。每一个模式都是针对一定问题的解决方案。工厂方法模式针对的是一个产品等级结构；而抽象工厂模式针对的是多个产品等级结果。








